#### euclidean_distance like pythagorus theorem ###

def euclidean_distance(pt1 , pt2):
  distance = 0
  for i in range(len(pt1)):
    distance = distance + (pt1[i] - pt2[i])** 2
  return distance**0.5


print(euclidean_distance([1, 2], [4, 0]))
print(euclidean_distance([5, 4, 3], [1, 7, 9]))

#### manhattan_distance #####

def manhattan_distance(pt1, pt2):
  distance = 0
  for i in range(len(pt1)):
    distance = distance + abs(pt1[i] - pt2[i])
  return distance

print(manhattan_distance([1, 2], [4, 0]))
print(manhattan_distance([5, 4, 3], [1, 7, 9]))

### hamming_distance ###

def hamming_distance(pt1, pt2):
  distance = 0
  for i in range(len(pt1)):
    if pt1[i] != pt2[i]:
      distance += 1
  return distance

print(hamming_distance([1, 2], [1, 100]))
print(hamming_distance([5, 4, 9], [1, 7, 9]))

##### shortcut for above formulas ###

from scipy.spatial import distance

print(distance.euclidean([1, 2], [4, 0]))
print(distance.cityblock([1, 2], [4, 0]))
print(distance.hamming([5, 4, 9], [1, 7, 9])) #return sum of 0 or 1 divided by total dimension

#### loss #####

x = [1, 2, 3]
y = [5, 1, 3]

#y = x
m1 = 1
b1 = 0

#y = 0.5x + 1
m2 = 0.5
b2 = 1

y_predicted1 = [m1*i + b1 for i in x]

y_predicted2 = [m2*i + b2 for i in x]

total_loss1 = 0
for i in range(len(x)):
  total_loss1 += (y[i] - y_predicted1[i])**2

total_loss2 = 0
for i in range(len(x)):
  total_loss2 += (y[i] - y_predicted2[i])**2

print(total_loss1)
print(total_loss2)

better_fit = 2

*the smaller the loss, the better the line fits in 

### gradient descent #####

# b gradient
def get_gradient_at_b(x, y, m, b):
  diff = 0
  N = len(x)
  for i in range(len(x)):
    diff += (y[i] - (m*x[i]+b))
  b_gradient = -2/N * diff
  return b_gradient

# m gradient
def get_gradient_at_m(x, y, m, b):
  diff = 0
  N = len(x)
  for i in range(N):
    y_val = y[i]
    x_val = x[i]
    diff += x_val*(y_val - ((m * x_val) + b))
    m_gradient = -2/N * diff
  return m_gradient

####### apply learning rate #####
new_b = current_b - (learning_rate * b_gradient)

def get_gradient_at_b(x, y, b, m):
  N = len(x)
  diff = 0
  for i in range(N):
    x_val = x[i]
    y_val = y[i]
    diff += (y_val - ((m * x_val) + b))
  b_gradient = -(2/N) * diff  
  return b_gradient

def get_gradient_at_m(x, y, b, m):
  N = len(x)
  diff = 0
  for i in range(N):
      x_val = x[i]
      y_val = y[i]

##### advance learning rate: gradient descent ########

import codecademylib3_seaborn
import matplotlib.pyplot as plt

def get_gradient_at_b(x, y, b, m):
  N = len(x)
  diff = 0
  for i in range(N):
    x_val = x[i]
    y_val = y[i]
    diff += (y_val - ((m * x_val) + b))
  b_gradient = -(2/N) * diff  
  return b_gradient

def get_gradient_at_m(x, y, b, m):
  N = len(x)
  diff = 0
  for i in range(N):
      x_val = x[i]
      y_val = y[i]
      diff += x_val * (y_val - ((m * x_val) + b))
  m_gradient = -(2/N) * diff  
  return m_gradient

#Your step_gradient function here
def step_gradient(b_current, m_current, x, y, learning_rate):

    b_gradient = get_gradient_at_b(x, y, b_current, m_current)
    m_gradient = get_gradient_at_m(x, y, b_current, m_current)
    b = b_current - (learning_rate * b_gradient)
    m = m_current - (learning_rate * m_gradient)
    return [b, m]
  
#Your gradient_descent function here:  
def gradient_descent(x, y, learning_rate, num_iterations):
  b = 0
  m = 0
  for n in range(num_iterations):
    b, m = step_gradient(b, m, x, y, learning_rate)
  return b, m

months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
revenue = [52, 74, 79, 95, 115, 110, 129, 126, 147, 146, 156, 184]

#Uncomment the line below to run your gradient_descent function
b, m = gradient_descent(months, revenue, 0.01, 1000)

#Uncomment the lines below to see the line you've settled upon!
y = [m*x + b for x in months]

plt.plot(months, revenue, "o")
plt.plot(months, y)

plt.show()
      diff += x_val * (y_val - ((m * x_val) + b))
  m_gradient = -(2/N) * diff  
  return m_gradient

# Define your step_gradient function here
def step_gradient(x, y, b_current, m_current):
  b_gradient= get_gradient_at_b(x, y, b_current, m_current)
  m_gradient= get_gradient_at_m(x, y, b_current, m_current)
  b = b_current - (0.01 * b_gradient)
  m = m_current - (0.01 * m_gradient)
  return (b, m)

months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
revenue = [52, 74, 79, 95, 115, 110, 129, 126, 147, 146, 156, 184]

# current intercept guess:
b = 0
# current slope guess:
m = 0

# Call your function here to update b and m
b, m = step_gradient(months, revenue, b, m)
print(b, m)

### example 1 #####

import codecademylib3_seaborn
from gradient_descent_funcs import gradient_descent
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv("heights.csv")

X = df["height"]
y = df["weight"]

b, m = gradient_descent(X, y, learning_rate=0.0001, num_iterations=1000)
y_predictions = [x*m + b for x in X]

plt.plot(X, y, 'o')
#plot your line here:
plt.plot(X, y_predictions, 'o')
plt.show()

#### module for linear regression optimised: Scikit-Learn ####

from sklearn.linear_model import LinearRegression
line_fitter = LinearRegression()
line_fitter.fit(X, y) => b, m = gradient_descent(X, y, learning_rate=0.0001, num_iterations=1000) * similar
y_predicted = line_fitter.predict(X) => y_predictions = [x*m + b for x in X] * similar

# example #

import codecademylib3_seaborn
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
import numpy as np

temperature = np.array(range(60, 100, 2))
temperature = temperature.reshape(-1, 1)
sales = [65, 58, 46, 45, 44, 42, 40, 40, 36, 38, 38, 28, 30, 22, 27, 25, 25, 20, 15, 5]

line_fitter = LinearRegression()
line_fitter.fit(temperature, sales)
sales_predict = line_fitter.predict(temperature)

plt.plot(temperature, sales, 'o')
plt.plot(temperature, sales_predict, 'o')
plt.show()

####### one final example ######

import codecademylib3_seaborn
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
import numpy as np

temperature = np.array(range(60, 100, 2))
temperature = temperature.reshape(-1, 1)
sales = [65, 58, 46, 45, 44, 42, 40, 40, 36, 38, 38, 28, 30, 22, 27, 25, 25, 20, 15, 5]

line_fitter = LinearRegression()
line_fitter.fit(temperature, sales)
sales_predict = line_fitter.predict(temperature)

plt.plot(temperature, sales, 'o')
plt.plot(temperature, sales_predict, 'o')
plt.show()

#### predict honeybee project #####

import codecademylib3_seaborn
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn import linear_model

df = pd.read_csv("https://s3.amazonaws.com/codecademy-content/programs/data-science-path/linear_regression/honeyproduction.csv")

print(df.head())
prod_per_year = df.groupby('year').totalprod.mean().reset_index()

X = prod_per_year['year'].values.reshape(-1, 1)
y = prod_per_year['totalprod']

plt.scatter(X, y)
plt.show()

regr = linear_model.LinearRegression()
regr.fit(X, y)
print(regr.coef_[0])
print(regr.intercept_)
y_predict = regr.predict(X)

plt.plot(X, y_predict)
plt.show()

#create an array to predict future value
X_future = np.array(range(2013, 2050))
# reshape
X_future = X_future.reshape(-1, 1)
print(X_future)

future_predict = regr.predict(X_future)
plt.plot(X_future, future_predict)
plt.show()